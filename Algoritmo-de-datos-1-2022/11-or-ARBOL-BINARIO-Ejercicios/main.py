from algo1 import *
from aplication import *
BT2=BinaryTree()
print('Arbol BT2:')
print("(B,'A',7):",insert(BT2,'A',7),'         ____A    ')
print("(B,'B',4):",insert(BT2,'B',4),'        |         ')
print("(B,'E',6):",insert(BT2,'E',6),'      __B__       ')
print("(B,'D',2):",insert(BT2,'D',2),'     |     |      ')
print('                  D     E')
print_B(BT2)
print()
BT1=BinaryTree()
print('Arbol BT1:')
print("(B,'A',7):",insert(BT1,'A',7),'         ____A____    ')
print("(B,'B',4):",insert(BT1,'B',4),'      	|          |   ')
print("(B,'C',9):",insert(BT1,'C',9),'      __B__      __C__ ')
print("(B,'E',6):",insert(BT1,'E',6),'     |     |    |     |')
print("(B,'F',8):",insert(BT1,'F',8),'     D     E    F     H')
print("(B,'H',11):",insert(BT1,'H',11),'')
print("(B,'D',2):",insert(BT1,'D',2),'')
print_B(BT1)
print()

print('Esta Balanceado BT1 y BT2 ')
print('BT1:',balanced(BT1))
print('BT2:',balanced(BT2))
print()
print('BT2 es un sub arbol de  BT1')
print(subTree(BT1,BT2))
print()
BT1.root.rightnode.rightnode.key=1
print('BT1 Es un arbol de busqueda')
print(checkBST(BT1))