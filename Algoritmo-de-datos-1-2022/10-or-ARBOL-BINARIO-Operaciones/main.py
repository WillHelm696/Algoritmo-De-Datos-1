from algo1 import *
from Inversa import *
from binarytree import *

B=BinaryTree()
print('Insertar:')
print("(B,'A',7):",insert(B,'A',7),'         ____A____    ')
print("(B,'B',4):",insert(B,'B',4),'      	|          |   ')
print("(B,'C',9):",insert(B,'C',9),'  	  __B__      __C__ ')
print("(B,'E',6):",insert(B,'E',6),'    |     |    |     |')
print("(B,'F',8):",insert(B,'F',8),'    D     E    F     H')
print("(B,'H',11):",insert(B,'H',11),'')
print("(B,'D',2):",insert(B,'D',2),'')
print()
print_B(B)
print()
print('Buscar:')
print('key (B,F):',search(B,'F'))
print('key (B,G):',search(B,'G'))
print()
print('Eliminar por elemento:')
print('(B,A)',delete(B,'A'))
print('         ____E____    ')
print('      	|         |   ')
print('      __B       __C__ ')
print('     |         |     |')
print('     D         F     H')
print_B(B)
print()

print('Eliminar por Llave:')
print('(B,9)',deleteKey(B,9))
print('         ____E____    ')
print('      	|         |   ')
print('  	  __B         F__ ')
print('     |               |')
print('     D               H')
print_B(B)
print()
print('Acceso:')
print('(B,11)',access(B,11))
print('(B,5)',access(B,5))
print()
print('Actualizar:')
print('(B,G,11)',update(B,'G',11))
print_B(B)
print()
print('Recorrer Arbol en orden:')
print_L(traverseInOrder(B))
print('Recorrer Arbol en postOrden:')
print_L(traverseInPostOrder(B))
print('Recorrer Arbol en Pre Orden:')
print_L(traverseInPreOrder(B))
print('Recorrer Arbol por Anchura:')
print_L(traverseBreadFirst(B))